"use client";
import { useEffect, useMemo, useState } from "react";
import useSWR from "swr";
import { usePathname, useRouter, useSearchParams } from "next/navigation";
import PlayerSearch from "@/components/scouting/PlayerSearch";
import SeasonSelector from "@/components/scouting/SeasonSelector";
import SeasonTable from "@/components/scouting/SeasonTable";

type Row = { season:number; PA:number; AB:number; H:number; AVG:number; OBP:number; SLG:number; OPS:number; HR:number; BB:number; SO:number };

function ensureRows(payload:any): Row[] {
  if (!payload) return [];
  if (Array.isArray(payload)) return payload as Row[];
  if (Array.isArray(payload.rows)) return payload.rows as Row[];
  if (payload.row && typeof payload.row === "object") return [payload.row as Row];
  if (payload.data && Array.isArray(payload.data.rows)) return payload.data.rows as Row[];
  return [];
}

const fetcher = (url:string) => fetch(url, { cache: "no-store" }).then(r=>r.json());

export default function Page() {
  const sp = useSearchParams();
  const router = useRouter();
  const pathname = usePathname();

  const [q, setQ] = useState(sp.get("q") || "Pete Alonso");
  const [picked, setPicked] = useState<{id:number; name:string} | null>(sp.get("playerId") ? { id: Number(sp.get("playerId")), name: q } : null);
  const [years, setYears] = useState<number[]>(
    (sp.get("ids") || "").split(",").map(s=>parseInt(s,10)).filter(n=>Number.isFinite(n)).length
      ? (sp.get("ids") || "").split(",").map(s=>parseInt(s,10)).filter(n=>Number.isFinite(n))
      : [2025]
  );
  const [advOpen, setAdvOpen] = useState(true);

  useEffect(()=>{
    const params = new URLSearchParams();
    if (q) params.set("q", q);
    if (picked?.id) params.set("playerId", String(picked.id));
    if (years.length) params.set("ids", years.slice().sort((a,b)=>a-b).join(","));
    router.replace(`${pathname}?${params.toString()}`, { scroll: false });
  }, [q, picked?.id, years.join(","), pathname, router]);

  const seasonKey = picked && years.length ? `/api/biolab/hitters/${picked.id}/season?ids=${years.slice().sort((a,b)=>a-b).join(",")}` : null;
  const { data: seasonData } = useSWR(seasonKey, fetcher, { revalidateOnFocus: false });
  const rows: Row[] = useMemo(()=>ensureRows(seasonData), [seasonData]);

  const kpi = useMemo(()=>{
    if (!rows.length) return null as null | Record<string, number>;
    const sum = (fn:(r:Row)=>number) => rows.reduce((a,r)=>a+fn(r),0);
    const PA = sum(r=>r.PA);
    const AB = sum(r=>r.AB);
    const H  = sum(r=>r.H);
    const HR = sum(r=>r.HR);
    const BB = sum(r=>r.BB);
    const SO = sum(r=>r.SO);
    const OBP = PA ? rows.reduce((a,r)=>a+(r.OBP*r.PA),0)/PA : 0;
    const SLG = AB ? rows.reduce((a,r)=>a+(r.SLG*r.AB),0)/AB : 0;
    const AVG = AB ? H/AB : 0;
    const OPS = OBP + SLG;
    return { PA, AB, H, AVG, OBP, SLG, OPS, HR, BB, SO };
  }, [rows]);

  const bySeasonKey = advOpen && picked && years.length ? `/api/biolab/savant/hitter/summary/by-season?id=${picked.id}&seasons=${years.slice().sort((a,b)=>a-b).join(",")}` : null;
  const { data: adv } = useSWR(bySeasonKey, fetcher, { revalidateOnFocus: false });
  const advRows: any[] = Array.isArray(adv?.rows) ? adv.rows : [];

  async function unifiedSearch() {
    if (!picked) {
      const r = await fetch(`/api/biolab/players/search?q=${encodeURIComponent(q)}`, { cache: "no-store" });
      const j = await r.json();
      const items = Array.isArray(j?.items) ? j.items : [];
      const best = items[0] || null;
      setPicked(best ? { id: Number(best.id), name: String(best.name || q) } : null);
      return;
    }
  }
  function run() { if (!picked) unifiedSearch(); }
  function fmt3(v:number){ return Number(v||0).toFixed(3); }
  function pct1(v:number){ return `${(Number(v||0)*100).toFixed(1)}%`; }

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center gap-3">
        <PlayerSearch value={q} onValue={setQ} onPick={(it)=> setPicked(it ? { id: it.id, name: it.name } : null)} />
        <button onClick={run} className="px-3 py-2 rounded-md bg-amber-600">Search</button>
        <div className="text-sm text-zinc-400">{picked ? `Selected: ${picked.name} (${picked.id})` : "No player selected"}</div>
      </div>

      <SeasonSelector selected={years} onChange={setYears} />

      <div className="grid grid-cols-10 gap-2 text-center">
        {["PA","AB","H","AVG","OBP","SLG","OPS","HR","BB","SO"].map(k=>(
          <div key={k} className="rounded-md bg-zinc-900 border border-zinc-700 p-3">
            <div className="text-xs text-zinc-400">{k}</div>
            <div className="text-lg">{kpi ? (["AVG","OBP","SLG","OPS"].includes(k) ? (kpi as any)[k].toFixed(3) : (kpi as any)[k].toLocaleString()) : 0}</div>
          </div>
        ))}
      </div>

      <SeasonTable rows={rows} />

      <div className="mt-6">
        <div className="flex items-center justify-between mb-2">
          <div className="text-sm text-zinc-400">Advanced (Statcast)</div>
          <button onClick={()=>setAdvOpen(v=>!v)} className="px-2 py-1 rounded-md border border-zinc-600 bg-zinc-800 text-xs">{advOpen ? "Hide" : "Show"}</button>
        </div>
        {advOpen && (
          <div className="max-w-full overflow-auto border border-zinc-700 rounded-md">
            <table className="w-full text-sm">
              <thead className="bg-zinc-900 sticky top-0">
                <tr>
                  {["season","BBE","EV","Max EV","LA","HardHit%","SweetSpot%","Barrel%","xwOBA","xBA","xSLG","Swing%","Whiff%","Chase%","Zone%","FPS%","GB%","LD%","FB%"].map(h=>(
                    <th key={h} className="px-3 py-2 text-left border-b border-zinc-700">{h}</th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {advRows.map(r=>(
                  <tr key={r.season} className="odd:bg-zinc-950">
                    <td className="px-3 py-2 border-b border-zinc-800">{r.season}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{r.bbe}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{r.ev ? `${r.ev.toFixed(1)} mph` : "0.0 mph"}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{r.evMax ? `${r.evMax.toFixed(1)} mph` : "0.0 mph"}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{r.la ? `${r.la.toFixed(1)}°` : "0.0°"}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{pct1(r.hard)}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{pct1(r.sweet)}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{pct1(r.barrel)}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{fmt3(r.xwOBA)}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{fmt3(r.xBA)}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{fmt3(r.xSLG)}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{pct1(r.swing)}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{pct1(r.whiff)}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{pct1(r.chase)}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{pct1(r.zone)}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{pct1(r.fps)}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{pct1(r.gb)}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{pct1(r.ld)}</td>
                    <td className="px-3 py-2 border-b border-zinc-800">{pct1(r.fb)}</td>
                  </tr>
                ))}
                {!advRows.length && <tr><td className="px-3 py-3 text-zinc-500" colSpan={19}>No Statcast rows</td></tr>}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
}
